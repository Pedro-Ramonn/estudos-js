//O que é uma Arrow function?
//Primeiramente devemos entender que para se escrever uma função necessitamos da seguinte formula

function Bye(){
	console.log("Bye")
}

Bye()

//Porem, de acordo com as aulas de orientação a objetos, também podemos escrever uma função através de uma constante

const hello = function(){
	console.log("Hello")
}

console.log(hello)

//Para melhorar a escrita acima podemos utilizar a tão famosa arrow function que simplifica a maneira de se escrever o mesmo código acima

const Ola = () => console.log("Olá")

Ola()

//podemos utilizar com parametros também

const ola = (nome) => console.log(nome)

ola("Pedro")

//porem ao se adicionar mais de um parametro, é necessario incluir {} após =>

const opa = (nome, idade) => {console.log(nome), console.log(idade)}

opa("Pedro", 26)

//utilizando arrow functions com map, filter e reduce

const numbers = [1,2,3,4,5,6];

const map1 = numbers.map((x) => x * 2); //a função map() MAPEIA o array escolhido e executa alguma função que pedimos e nos retorna um novo array em ordem;
console.log(map1);

const filtrandoPar = numbers.filter((x) => x % 2 === 0 ) //a função filter() FILTRA os valores dentro do array de acordo com a função passada após a =>;
console.log(filtrandoPar);

const total = numbers.reduce((accumulator, x) => accumulator + x) //reduce() pega todos os valores do array e realixa alguma função com eles, sempre se utiliza o accumulator
																  // para acumular o valor anteriormente recebido

console.log(total)							

